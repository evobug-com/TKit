name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

jobs:
  # Build the Windows app - creates reusable artifacts
  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
      channel: ${{ steps.get_version.outputs.CHANNEL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.LOCALAPPDATA }}\Pub\Cache
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install Dependencies
        run: flutter pub get

      - name: Cache generated files
        uses: actions/cache@v4
        with:
          path: |
            .dart_tool/build
            lib/**/*.g.dart
            lib/**/*.freezed.dart
          key: codegen-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            codegen-

      - name: Run code generation
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version $VERSION"

          # Detect if this is a prerelease
          if [[ "$VERSION" =~ -alpha|-beta|-rc|-dev ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease"

            # Determine channel
            if [[ "$VERSION" =~ -dev ]]; then
              echo "CHANNEL=dev" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ -beta ]]; then
              echo "CHANNEL=beta" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ -alpha ]]; then
              echo "CHANNEL=alpha" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ -rc ]]; then
              echo "CHANNEL=rc" >> $GITHUB_OUTPUT
            else
              echo "CHANNEL=stable" >> $GITHUB_OUTPUT
            fi
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "CHANNEL=stable" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

      - name: Build Windows app
        run: flutter build windows --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: windows-build
          path: build/windows/x64/runner/Release/**
          retention-days: 1

  # Package MSIX - can retry without rebuilding
  package-msix:
    needs: build-windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows-build
          path: build/windows/x64/runner/Release

      - name: Create MSIX package with native tools
        shell: pwsh
        run: |
          .\windows\package-msix.ps1 -Version "${{ needs.build-windows.outputs.version }}"

      - name: Rename MSIX file
        shell: bash
        run: |
          mv build/windows/x64/runner/Release/tkit.msix build/windows/x64/runner/Release/TKit-Setup-${{ needs.build-windows.outputs.version }}.msix

      - name: Upload MSIX artifact
        uses: actions/upload-artifact@v5
        with:
          name: windows-msix
          path: build/windows/x64/runner/Release/TKit-Setup-${{ needs.build-windows.outputs.version }}.msix
          retention-days: 1

  # Package Inno Setup installer - can retry without rebuilding
  package-installer:
    needs: build-windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows-build
          path: build/windows/x64/runner/Release

      - name: Setup Inno Setup
        run: choco install innosetup -y

      - name: Create installer with Inno Setup
        run: |
          set VERSION=${{ needs.build-windows.outputs.version }}
          iscc windows\installer.iss
        shell: cmd

      - name: Upload installer artifact
        uses: actions/upload-artifact@v5
        with:
          name: windows-installer
          path: build/windows/TKit-Setup-${{ needs.build-windows.outputs.version }}.exe
          retention-days: 1

  # Create GitHub release with all packages
  release:
    needs: [build-windows, package-msix, package-installer]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download MSIX artifact
        uses: actions/download-artifact@v5
        with:
          name: windows-msix
          path: artifacts/

      - name: Download installer artifact
        uses: actions/download-artifact@v5
        with:
          name: windows-installer
          path: artifacts/

      - name: Extract changelog for version
        id: changelog
        shell: bash
        run: |
          VERSION=${{ needs.build-windows.outputs.version }}
          # Extract changelog section for this version
          CHANGELOG=$(awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md | sed '/^$/d')

          # If no changelog found, use default
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release version $VERSION"
          fi

          # Save to file to handle multiline
          echo "$CHANGELOG" > changelog.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          body_path: changelog.txt
          draft: false
          prerelease: ${{ needs.build-windows.outputs.is_prerelease }}
          name: ${{ needs.build-windows.outputs.channel == 'stable' && format('Release {0}', needs.build-windows.outputs.version) || format('{0} {1}', needs.build-windows.outputs.channel, needs.build-windows.outputs.version) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
