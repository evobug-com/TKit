// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema6 extends i0.VersionedSchema {
  Schema6({required super.database}) : super(version: 6);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    categoryMappings,
    updateHistory,
    unknownProcesses,
    topGamesCache,
    communityMappings,
    mappingLists,
  ];
  late final Shape0 categoryMappings = Shape0(
    source: i0.VersionedTable(
      entityName: 'category_mappings',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 updateHistory = Shape1(
    source: i0.VersionedTable(
      entityName: 'update_history',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 unknownProcesses = Shape2(
    source: i0.VersionedTable(
      entityName: 'unknown_processes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 topGamesCache = Shape3(
    source: i0.VersionedTable(
      entityName: 'top_games_cache',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(twitch_category_id)'],
      columns: [_column_4, _column_24, _column_25, _column_26, _column_27],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 communityMappings = Shape4(
    source: i0.VersionedTable(
      entityName: 'community_mappings',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(process_name, twitch_category_id)'],
      columns: [
        _column_0,
        _column_1,
        _column_3,
        _column_4,
        _column_5,
        _column_28,
        _column_29,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 mappingLists = Shape5(
    source: i0.VersionedTable(
      entityName: 'mapping_lists',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_11,
        _column_39,
        _column_40,
        _column_41,
        _column_42,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get processName =>
      columnsByName['process_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get executablePath =>
      columnsByName['executable_path']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get normalizedInstallPaths =>
      columnsByName['normalized_install_paths']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get twitchCategoryId =>
      columnsByName['twitch_category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get twitchCategoryName =>
      columnsByName['twitch_category_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUsedAt =>
      columnsByName['last_used_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastApiFetch =>
      columnsByName['last_api_fetch']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get cacheExpiresAt =>
      columnsByName['cache_expires_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get manualOverride =>
      columnsByName['manual_override']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isEnabled =>
      columnsByName['is_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get pendingSubmission =>
      columnsByName['pending_submission']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get listId =>
      columnsByName['list_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'process_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'executable_path',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'normalized_install_paths',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'twitch_category_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'twitch_category_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_6(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_used_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_8(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_api_fetch',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'cache_expires_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<bool> _column_10(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'manual_override',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("manual_override" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_11(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_enabled',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_enabled" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<bool> _column_12(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'pending_submission',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("pending_submission" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'list_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get processName =>
      columnsByName['process_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get categoryId =>
      columnsByName['category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get categoryName =>
      columnsByName['category_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get success =>
      columnsByName['success']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get errorMessage =>
      columnsByName['error_message']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_16(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'success',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("success" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'error_message',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_18(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get executableName =>
      columnsByName['executable_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get windowTitle =>
      columnsByName['window_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get firstDetected =>
      columnsByName['first_detected']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get occurrenceCount =>
      columnsByName['occurrence_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get resolved =>
      columnsByName['resolved']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'executable_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'window_title',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_21(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'first_detected',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'occurrence_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<bool> _column_23(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'resolved',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("resolved" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get twitchCategoryId =>
      columnsByName['twitch_category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get gameName =>
      columnsByName['game_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get boxArtUrl =>
      columnsByName['box_art_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastUpdated =>
      columnsByName['last_updated']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get expiresAt =>
      columnsByName['expires_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'game_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'box_art_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_26(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_updated',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_27(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'expires_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get processName =>
      columnsByName['process_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get normalizedInstallPaths =>
      columnsByName['normalized_install_paths']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get twitchCategoryId =>
      columnsByName['twitch_category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get twitchCategoryName =>
      columnsByName['twitch_category_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get verificationCount =>
      columnsByName['verification_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get lastVerified =>
      columnsByName['last_verified']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get source =>
      columnsByName['source']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get category =>
      columnsByName['category']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get syncedAt =>
      columnsByName['synced_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_28(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'verification_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<DateTime> _column_29(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_verified',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultValue: const CustomExpression('\'community\''),
    );
i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_32(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'synced_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceType =>
      columnsByName['source_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceUrl =>
      columnsByName['source_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get submissionHookUrl =>
      columnsByName['submission_hook_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isEnabled =>
      columnsByName['is_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isReadOnly =>
      columnsByName['is_read_only']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get priority =>
      columnsByName['priority']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get lastSyncedAt =>
      columnsByName['last_synced_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get lastSyncError =>
      columnsByName['last_sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultValue: const CustomExpression('\'\''),
    );
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_37(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'submission_hook_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_39(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_read_only',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_read_only" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_40(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'priority',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('100'),
    );
i1.GeneratedColumn<DateTime> _column_41(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_synced_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_42(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'last_sync_error',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

final class Schema7 extends i0.VersionedSchema {
  Schema7({required super.database}) : super(version: 7);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    categoryMappings,
    updateHistory,
    unknownProcesses,
    topGamesCache,
    communityMappings,
    mappingLists,
  ];
  late final Shape0 categoryMappings = Shape0(
    source: i0.VersionedTable(
      entityName: 'category_mappings',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 updateHistory = Shape1(
    source: i0.VersionedTable(
      entityName: 'update_history',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 unknownProcesses = Shape2(
    source: i0.VersionedTable(
      entityName: 'unknown_processes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 topGamesCache = Shape3(
    source: i0.VersionedTable(
      entityName: 'top_games_cache',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(twitch_category_id)'],
      columns: [_column_4, _column_24, _column_25, _column_26, _column_27],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 communityMappings = Shape4(
    source: i0.VersionedTable(
      entityName: 'community_mappings',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(process_name, twitch_category_id)'],
      columns: [
        _column_0,
        _column_1,
        _column_3,
        _column_4,
        _column_5,
        _column_28,
        _column_29,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 mappingLists = Shape5(
    source: i0.VersionedTable(
      entityName: 'mapping_lists',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_11,
        _column_39,
        _column_40,
        _column_41,
        _column_42,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 5:
        final schema = Schema6(database: database);
        final migrator = i1.Migrator(database, schema);
        await from5To6(migrator, schema);
        return 6;
      case 6:
        final schema = Schema7(database: database);
        final migrator = i1.Migrator(database, schema);
        await from6To7(migrator, schema);
        return 7;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from5To6: from5To6, from6To7: from6To7),
);
