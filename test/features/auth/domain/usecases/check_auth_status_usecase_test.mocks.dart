// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/auth/domain/usecases/check_auth_status_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i5;
import 'package:tkit/features/auth/data/models/device_code_response.dart'
    as _i7;
import 'package:tkit/features/auth/domain/entities/twitch_token.dart' as _i8;
import 'package:tkit/features/auth/domain/entities/twitch_user.dart' as _i6;
import 'package:tkit/features/auth/domain/repositories/i_auth_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i3.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>> authenticate() =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>>.value(
                  _FakeEither_0<_i5.Failure, _i6.TwitchUser>(
                    this,
                    Invocation.method(#authenticate, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.DeviceCodeResponse>>
  initiateDeviceCodeAuth() =>
      (super.noSuchMethod(
            Invocation.method(#initiateDeviceCodeAuth, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i7.DeviceCodeResponse>
                >.value(
                  _FakeEither_0<_i5.Failure, _i7.DeviceCodeResponse>(
                    this,
                    Invocation.method(#initiateDeviceCodeAuth, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.DeviceCodeResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>>
  authenticateWithDeviceCode(String? deviceCode) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateWithDeviceCode, [deviceCode]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>>.value(
                  _FakeEither_0<_i5.Failure, _i6.TwitchUser>(
                    this,
                    Invocation.method(#authenticateWithDeviceCode, [
                      deviceCode,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#logout, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken>> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken>>.value(
                  _FakeEither_0<_i5.Failure, _i8.TwitchToken>(
                    this,
                    Invocation.method(#refreshToken, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#isAuthenticated, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken?>> getCurrentToken() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentToken, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken?>>.value(
                  _FakeEither_0<_i5.Failure, _i8.TwitchToken?>(
                    this,
                    Invocation.method(#getCurrentToken, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.TwitchToken?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser?>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser?>>.value(
                  _FakeEither_0<_i5.Failure, _i6.TwitchUser?>(
                    this,
                    Invocation.method(#getCurrentUser, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchUser?>>);
}
