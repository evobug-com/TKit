// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/auth/presentation/providers/auth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i6;
import 'package:tkit/features/auth/data/datasources/token_local_datasource.dart'
    as _i12;
import 'package:tkit/features/auth/data/models/device_code_response.dart'
    as _i15;
import 'package:tkit/features/auth/data/models/twitch_token_model.dart' as _i13;
import 'package:tkit/features/auth/data/models/twitch_user_model.dart' as _i14;
import 'package:tkit/features/auth/domain/entities/twitch_token.dart' as _i9;
import 'package:tkit/features/auth/domain/entities/twitch_user.dart' as _i11;
import 'package:tkit/features/auth/domain/repositories/i_auth_repository.dart'
    as _i2;
import 'package:tkit/features/auth/domain/usecases/check_auth_status_usecase.dart'
    as _i7;
import 'package:tkit/features/auth/domain/usecases/get_current_user_usecase.dart'
    as _i10;
import 'package:tkit/features/auth/domain/usecases/logout_usecase.dart' as _i4;
import 'package:tkit/features/auth/domain/usecases/refresh_token_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i4.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IAuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [CheckAuthStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckAuthStatusUseCase extends _i1.Mock
    implements _i7.CheckAuthStatusUseCase {
  MockCheckAuthStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IAuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RefreshTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshTokenUseCase extends _i1.Mock
    implements _i8.RefreshTokenUseCase {
  MockRefreshTokenUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IAuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>>.value(
                  _FakeEither_1<_i6.Failure, _i9.TwitchToken>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>>);
}

/// A class which mocks [GetCurrentUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUserUseCase extends _i1.Mock
    implements _i10.GetCurrentUserUseCase {
  MockGetCurrentUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IAuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>>.value(
                  _FakeEither_1<_i6.Failure, _i11.TwitchUser?>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>>);
}

/// A class which mocks [TokenLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenLocalDataSource extends _i1.Mock
    implements _i12.TokenLocalDataSource {
  MockTokenLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveToken(_i13.TwitchTokenModel? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveToken, [token]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i13.TwitchTokenModel?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i5.Future<_i13.TwitchTokenModel?>.value(),
          )
          as _i5.Future<_i13.TwitchTokenModel?>);

  @override
  _i5.Future<void> deleteToken() =>
      (super.noSuchMethod(
            Invocation.method(#deleteToken, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> hasToken() =>
      (super.noSuchMethod(
            Invocation.method(#hasToken, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> saveUser(_i14.TwitchUserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i14.TwitchUserModel?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i5.Future<_i14.TwitchUserModel?>.value(),
          )
          as _i5.Future<_i14.TwitchUserModel?>);

  @override
  _i5.Future<void> deleteUser() =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i2.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i15.DeviceCodeResponse>>
  initiateDeviceCodeAuth() =>
      (super.noSuchMethod(
            Invocation.method(#initiateDeviceCodeAuth, []),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, _i15.DeviceCodeResponse>
                >.value(
                  _FakeEither_1<_i6.Failure, _i15.DeviceCodeResponse>(
                    this,
                    Invocation.method(#initiateDeviceCodeAuth, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i15.DeviceCodeResponse>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser>>
  authenticateWithDeviceCode(String? deviceCode) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateWithDeviceCode, [deviceCode]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser>>.value(
                  _FakeEither_1<_i6.Failure, _i11.TwitchUser>(
                    this,
                    Invocation.method(#authenticateWithDeviceCode, [
                      deviceCode,
                    ]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#logout, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>>.value(
                  _FakeEither_1<_i6.Failure, _i9.TwitchToken>(
                    this,
                    Invocation.method(#refreshToken, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#isAuthenticated, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken?>> getCurrentToken() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentToken, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken?>>.value(
                  _FakeEither_1<_i6.Failure, _i9.TwitchToken?>(
                    this,
                    Invocation.method(#getCurrentToken, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i9.TwitchToken?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>>.value(
                  _FakeEither_1<_i6.Failure, _i11.TwitchUser?>(
                    this,
                    Invocation.method(#getCurrentUser, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.TwitchUser?>>);
}
