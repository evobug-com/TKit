// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/category_mapping/data/repositories/category_mapping_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/database/app_database.dart' as _i2;
import 'package:tkit/features/category_mapping/data/datasources/category_mapping_local_datasource.dart'
    as _i4;
import 'package:tkit/features/category_mapping/data/datasources/memory_cache.dart'
    as _i3;
import 'package:tkit/features/category_mapping/data/models/category_mapping_model.dart'
    as _i6;
import 'package:tkit/features/category_mapping/domain/entities/category_mapping.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCacheStats_2 extends _i1.SmartFake implements _i3.CacheStats {
  _FakeCacheStats_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoryMappingLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryMappingLocalDataSource extends _i1.Mock
    implements _i4.CategoryMappingLocalDataSource {
  MockCategoryMappingLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDatabase get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _FakeAppDatabase_0(this, Invocation.getter(#database)),
          )
          as _i2.AppDatabase);

  @override
  _i5.Future<_i6.CategoryMappingModel?> findMapping(
    String? processName,
    String? executablePath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findMapping, [processName, executablePath]),
            returnValue: _i5.Future<_i6.CategoryMappingModel?>.value(),
          )
          as _i5.Future<_i6.CategoryMappingModel?>);

  @override
  _i5.Future<List<_i6.CategoryMappingModel>> getAllMappings() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMappings, []),
            returnValue: _i5.Future<List<_i6.CategoryMappingModel>>.value(
              <_i6.CategoryMappingModel>[],
            ),
          )
          as _i5.Future<List<_i6.CategoryMappingModel>>);

  @override
  _i5.Future<void> saveMapping(_i6.CategoryMappingModel? mapping) =>
      (super.noSuchMethod(
            Invocation.method(#saveMapping, [mapping]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteMapping(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMapping, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateLastUsed(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastUsed, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.CategoryMappingModel>> getExpiredMappings() =>
      (super.noSuchMethod(
            Invocation.method(#getExpiredMappings, []),
            returnValue: _i5.Future<List<_i6.CategoryMappingModel>>.value(
              <_i6.CategoryMappingModel>[],
            ),
          )
          as _i5.Future<List<_i6.CategoryMappingModel>>);

  @override
  _i5.Future<List<_i6.CategoryMappingModel>> getMappingsExpiringSoon(
    Duration? threshold,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMappingsExpiringSoon, [threshold]),
            returnValue: _i5.Future<List<_i6.CategoryMappingModel>>.value(
              <_i6.CategoryMappingModel>[],
            ),
          )
          as _i5.Future<List<_i6.CategoryMappingModel>>);

  @override
  _i5.Future<int> deleteExpiredMappings() =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpiredMappings, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);
}

/// A class which mocks [MemoryCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoryCache extends _i1.Mock implements _i3.MemoryCache {
  MockMemoryCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxSize =>
      (super.noSuchMethod(Invocation.getter(#maxSize), returnValue: 0) as int);

  @override
  Duration get defaultTtl =>
      (super.noSuchMethod(
            Invocation.getter(#defaultTtl),
            returnValue: _FakeDuration_1(this, Invocation.getter(#defaultTtl)),
          )
          as Duration);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);

  @override
  double get hitRate =>
      (super.noSuchMethod(Invocation.getter(#hitRate), returnValue: 0.0)
          as double);

  @override
  _i3.CacheStats get stats =>
      (super.noSuchMethod(
            Invocation.getter(#stats),
            returnValue: _FakeCacheStats_2(this, Invocation.getter(#stats)),
          )
          as _i3.CacheStats);

  @override
  _i7.CategoryMapping? get(String? processName) =>
      (super.noSuchMethod(Invocation.method(#get, [processName]))
          as _i7.CategoryMapping?);

  @override
  void put(
    String? processName,
    _i7.CategoryMapping? mapping, {
    Duration? ttl,
  }) => super.noSuchMethod(
    Invocation.method(#put, [processName, mapping], {#ttl: ttl}),
    returnValueForMissingStub: null,
  );

  @override
  void remove(String? processName) => super.noSuchMethod(
    Invocation.method(#remove, [processName]),
    returnValueForMissingStub: null,
  );

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearExpired() => super.noSuchMethod(
    Invocation.method(#clearExpired, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetStats() => super.noSuchMethod(
    Invocation.method(#resetStats, []),
    returnValueForMissingStub: null,
  );
}
