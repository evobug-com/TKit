// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/category_mapping/domain/usecases/get_all_mappings_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i5;
import 'package:tkit/features/category_mapping/domain/entities/category_mapping.dart'
    as _i6;
import 'package:tkit/features/category_mapping/domain/repositories/i_category_mapping_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ICategoryMappingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICategoryMappingRepository extends _i1.Mock
    implements _i3.ICategoryMappingRepository {
  MockICategoryMappingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryMapping?>> findMapping(
    String? processName,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findMapping, [processName, path]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryMapping?>>.value(
                  _FakeEither_0<_i5.Failure, _i6.CategoryMapping?>(
                    this,
                    Invocation.method(#findMapping, [processName, path]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryMapping?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>
  getAllMappings() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMappings, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CategoryMapping>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CategoryMapping>>(
                    this,
                    Invocation.method(#getAllMappings, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveMapping(
    _i6.CategoryMapping? mapping,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveMapping, [mapping]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#saveMapping, [mapping]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteMapping(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMapping, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteMapping, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateLastUsed(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastUsed, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateLastUsed, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>
  getExpiredMappings() =>
      (super.noSuchMethod(
            Invocation.method(#getExpiredMappings, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CategoryMapping>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CategoryMapping>>(
                    this,
                    Invocation.method(#getExpiredMappings, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>
  getMappingsExpiringSoon(Duration? threshold) =>
      (super.noSuchMethod(
            Invocation.method(#getMappingsExpiringSoon, [threshold]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CategoryMapping>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CategoryMapping>>(
                    this,
                    Invocation.method(#getMappingsExpiringSoon, [threshold]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryMapping>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteExpiredMappings() =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpiredMappings, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#deleteExpiredMappings, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
