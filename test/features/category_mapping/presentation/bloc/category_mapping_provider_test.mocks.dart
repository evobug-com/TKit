// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/category_mapping/presentation/bloc/category_mapping_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i6;
import 'package:tkit/features/category_mapping/domain/entities/category_mapping.dart'
    as _i7;
import 'package:tkit/features/category_mapping/domain/repositories/i_category_mapping_repository.dart'
    as _i2;
import 'package:tkit/features/category_mapping/domain/usecases/delete_mapping_usecase.dart'
    as _i10;
import 'package:tkit/features/category_mapping/domain/usecases/find_mapping_usecase.dart'
    as _i8;
import 'package:tkit/features/category_mapping/domain/usecases/get_all_mappings_usecase.dart'
    as _i4;
import 'package:tkit/features/category_mapping/domain/usecases/save_mapping_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeICategoryMappingRepository_0 extends _i1.SmartFake
    implements _i2.ICategoryMappingRepository {
  _FakeICategoryMappingRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllMappingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllMappingsUseCase extends _i1.Mock
    implements _i4.GetAllMappingsUseCase {
  MockGetAllMappingsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ICategoryMappingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeICategoryMappingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ICategoryMappingRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CategoryMapping>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, List<_i7.CategoryMapping>>
                >.value(
                  _FakeEither_1<_i6.Failure, List<_i7.CategoryMapping>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CategoryMapping>>>);
}

/// A class which mocks [FindMappingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFindMappingUseCase extends _i1.Mock
    implements _i8.FindMappingUseCase {
  MockFindMappingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ICategoryMappingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeICategoryMappingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ICategoryMappingRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CategoryMapping?>> call({
    required String? processName,
    String? executablePath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #processName: processName,
              #executablePath: executablePath,
            }),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.CategoryMapping?>>.value(
                  _FakeEither_1<_i6.Failure, _i7.CategoryMapping?>(
                    this,
                    Invocation.method(#call, [], {
                      #processName: processName,
                      #executablePath: executablePath,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.CategoryMapping?>>);
}

/// A class which mocks [SaveMappingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveMappingUseCase extends _i1.Mock
    implements _i9.SaveMappingUseCase {
  MockSaveMappingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ICategoryMappingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeICategoryMappingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ICategoryMappingRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i7.CategoryMapping? mapping,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [mapping]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [mapping]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteMappingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteMappingUseCase extends _i1.Mock
    implements _i10.DeleteMappingUseCase {
  MockDeleteMappingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ICategoryMappingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeICategoryMappingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ICategoryMappingRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
