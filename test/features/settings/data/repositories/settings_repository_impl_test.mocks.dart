// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/settings/data/repositories/settings_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:talker/talker.dart' as _i3;
import 'package:tkit/core/utils/app_logger.dart' as _i6;
import 'package:tkit/features/settings/data/datasources/settings_local_datasource.dart'
    as _i4;
import 'package:tkit/features/settings/data/models/app_settings_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAppSettingsModel_0 extends _i1.SmartFake
    implements _i2.AppSettingsModel {
  _FakeAppSettingsModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTalker_1 extends _i1.SmartFake implements _i3.Talker {
  _FakeTalker_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SettingsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsLocalDataSource extends _i1.Mock
    implements _i4.SettingsLocalDataSource {
  @override
  _i5.Future<_i2.AppSettingsModel> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: _i5.Future<_i2.AppSettingsModel>.value(
              _FakeAppSettingsModel_0(
                this,
                Invocation.method(#getSettings, []),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i2.AppSettingsModel>.value(
              _FakeAppSettingsModel_0(
                this,
                Invocation.method(#getSettings, []),
              ),
            ),
          )
          as _i5.Future<_i2.AppSettingsModel>);

  @override
  _i5.Future<void> saveSettings(_i2.AppSettingsModel? settings) =>
      (super.noSuchMethod(
            Invocation.method(#saveSettings, [settings]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<_i2.AppSettingsModel> watchSettings() =>
      (super.noSuchMethod(
            Invocation.method(#watchSettings, []),
            returnValue: _i5.Stream<_i2.AppSettingsModel>.empty(),
            returnValueForMissingStub: _i5.Stream<_i2.AppSettingsModel>.empty(),
          )
          as _i5.Stream<_i2.AppSettingsModel>);

  @override
  _i5.Future<void> clearSettings() =>
      (super.noSuchMethod(
            Invocation.method(#clearSettings, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i6.AppLogger {
  @override
  _i3.Talker get talker =>
      (super.noSuchMethod(
            Invocation.getter(#talker),
            returnValue: _FakeTalker_1(this, Invocation.getter(#talker)),
            returnValueForMissingStub: _FakeTalker_1(
              this,
              Invocation.getter(#talker),
            ),
          )
          as _i3.Talker);

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void trace(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#trace, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
