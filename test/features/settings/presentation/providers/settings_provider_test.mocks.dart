// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/settings/presentation/providers/settings_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:talker/talker.dart' as _i3;
import 'package:tkit/core/errors/failure.dart' as _i6;
import 'package:tkit/core/utils/app_logger.dart' as _i10;
import 'package:tkit/features/settings/domain/entities/app_settings.dart'
    as _i7;
import 'package:tkit/features/settings/domain/usecases/get_settings_usecase.dart'
    as _i4;
import 'package:tkit/features/settings/domain/usecases/update_settings_usecase.dart'
    as _i8;
import 'package:tkit/features/settings/domain/usecases/watch_settings_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTalker_1 extends _i1.SmartFake implements _i3.Talker {
  _FakeTalker_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSettingsUseCase extends _i1.Mock
    implements _i4.GetSettingsUseCase {
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AppSettings>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.AppSettings>>.value(
                  _FakeEither_0<_i6.Failure, _i7.AppSettings>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i2.Either<_i6.Failure, _i7.AppSettings>>.value(
                  _FakeEither_0<_i6.Failure, _i7.AppSettings>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.AppSettings>>);
}

/// A class which mocks [UpdateSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateSettingsUseCase extends _i1.Mock
    implements _i8.UpdateSettingsUseCase {
  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> call(_i7.AppSettings? settings) =>
      (super.noSuchMethod(
            Invocation.method(#call, [settings]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#call, [settings]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i2.Either<_i6.Failure, void>>.value(
                  _FakeEither_0<_i6.Failure, void>(
                    this,
                    Invocation.method(#call, [settings]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [WatchSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchSettingsUseCase extends _i1.Mock
    implements _i9.WatchSettingsUseCase {
  @override
  _i5.Stream<_i7.AppSettings> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Stream<_i7.AppSettings>.empty(),
            returnValueForMissingStub: _i5.Stream<_i7.AppSettings>.empty(),
          )
          as _i5.Stream<_i7.AppSettings>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i10.AppLogger {
  @override
  _i3.Talker get talker =>
      (super.noSuchMethod(
            Invocation.getter(#talker),
            returnValue: _FakeTalker_1(this, Invocation.getter(#talker)),
            returnValueForMissingStub: _FakeTalker_1(
              this,
              Invocation.getter(#talker),
            ),
          )
          as _i3.Talker);

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void trace(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#trace, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
