// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/twitch_api/data/repositories/twitch_api_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:talker/talker.dart' as _i4;
import 'package:tkit/core/utils/app_logger.dart' as _i7;
import 'package:tkit/features/twitch_api/data/datasources/twitch_api_remote_datasource.dart'
    as _i5;
import 'package:tkit/features/twitch_api/data/models/twitch_category_model.dart'
    as _i3;
import 'package:tkit/features/twitch_api/data/models/twitch_user_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeTwitchUserModel_0 extends _i1.SmartFake
    implements _i2.TwitchUserModel {
  _FakeTwitchUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTwitchCategoryModel_1 extends _i1.SmartFake
    implements _i3.TwitchCategoryModel {
  _FakeTwitchCategoryModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTalker_2 extends _i1.SmartFake implements _i4.Talker {
  _FakeTalker_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TwitchApiRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTwitchApiRemoteDataSource extends _i1.Mock
    implements _i5.TwitchApiRemoteDataSource {
  MockTwitchApiRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setTokenProvider(_i6.Future<String?> Function()? provider) =>
      super.noSuchMethod(
        Invocation.method(#setTokenProvider, [provider]),
        returnValueForMissingStub: null,
      );

  @override
  void setRefreshTokenCallback(_i6.Future<String?> Function()? callback) =>
      super.noSuchMethod(
        Invocation.method(#setRefreshTokenCallback, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i3.TwitchCategoryModel>> searchCategories(
    String? query, {
    int? first = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchCategories, [query], {#first: first}),
            returnValue: _i6.Future<List<_i3.TwitchCategoryModel>>.value(
              <_i3.TwitchCategoryModel>[],
            ),
          )
          as _i6.Future<List<_i3.TwitchCategoryModel>>);

  @override
  _i6.Future<void> updateChannelCategory(
    String? broadcasterId,
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChannelCategory, [
              broadcasterId,
              categoryId,
            ]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.TwitchUserModel> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i6.Future<_i2.TwitchUserModel>.value(
              _FakeTwitchUserModel_0(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i6.Future<_i2.TwitchUserModel>);

  @override
  _i6.Future<_i3.TwitchCategoryModel> getCategoryById(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [categoryId]),
            returnValue: _i6.Future<_i3.TwitchCategoryModel>.value(
              _FakeTwitchCategoryModel_1(
                this,
                Invocation.method(#getCategoryById, [categoryId]),
              ),
            ),
          )
          as _i6.Future<_i3.TwitchCategoryModel>);

  @override
  _i6.Future<List<_i3.TwitchCategoryModel>> getGamesByIds(
    List<String>? categoryIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getGamesByIds, [categoryIds]),
            returnValue: _i6.Future<List<_i3.TwitchCategoryModel>>.value(
              <_i3.TwitchCategoryModel>[],
            ),
          )
          as _i6.Future<List<_i3.TwitchCategoryModel>>);

  @override
  _i6.Future<List<_i3.TwitchCategoryModel>> getGamesByNames(
    List<String>? gameNames,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getGamesByNames, [gameNames]),
            returnValue: _i6.Future<List<_i3.TwitchCategoryModel>>.value(
              <_i3.TwitchCategoryModel>[],
            ),
          )
          as _i6.Future<List<_i3.TwitchCategoryModel>>);

  @override
  _i6.Future<List<_i3.TwitchCategoryModel>> getTopGames({
    int? first = 20,
    String? after,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTopGames, [], {#first: first, #after: after}),
            returnValue: _i6.Future<List<_i3.TwitchCategoryModel>>.value(
              <_i3.TwitchCategoryModel>[],
            ),
          )
          as _i6.Future<List<_i3.TwitchCategoryModel>>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i7.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Talker get talker =>
      (super.noSuchMethod(
            Invocation.getter(#talker),
            returnValue: _FakeTalker_2(this, Invocation.getter(#talker)),
          )
          as _i4.Talker);

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void trace(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#trace, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
