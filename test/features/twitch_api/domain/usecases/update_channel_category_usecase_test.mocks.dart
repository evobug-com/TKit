// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/features/twitch_api/domain/usecases/update_channel_category_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i5;
import 'package:tkit/features/twitch_api/domain/entities/twitch_category.dart'
    as _i6;
import 'package:tkit/features/twitch_api/domain/entities/twitch_user.dart'
    as _i7;
import 'package:tkit/features/twitch_api/domain/repositories/i_twitch_api_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ITwitchApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITwitchApiRepository extends _i1.Mock
    implements _i3.ITwitchApiRepository {
  MockITwitchApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>>
  searchCategories(String? query, {int? first = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#searchCategories, [query], {#first: first}),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.TwitchCategory>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TwitchCategory>>(
                    this,
                    Invocation.method(
                      #searchCategories,
                      [query],
                      {#first: first},
                    ),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateChannelCategory(
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChannelCategory, [categoryId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateChannelCategory, [categoryId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TwitchUser>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.TwitchUser>>.value(
                  _FakeEither_0<_i5.Failure, _i7.TwitchUser>(
                    this,
                    Invocation.method(#getCurrentUser, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.TwitchUser>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchCategory>> getCategoryById(
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [categoryId]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchCategory>>.value(
                  _FakeEither_0<_i5.Failure, _i6.TwitchCategory>(
                    this,
                    Invocation.method(#getCategoryById, [categoryId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TwitchCategory>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>> getGamesByIds(
    List<String>? categoryIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getGamesByIds, [categoryIds]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.TwitchCategory>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TwitchCategory>>(
                    this,
                    Invocation.method(#getGamesByIds, [categoryIds]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>> getGamesByNames(
    List<String>? gameNames,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getGamesByNames, [gameNames]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.TwitchCategory>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TwitchCategory>>(
                    this,
                    Invocation.method(#getGamesByNames, [gameNames]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>> getTopGames({
    int? first = 20,
    String? after,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTopGames, [], {#first: first, #after: after}),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.TwitchCategory>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TwitchCategory>>(
                    this,
                    Invocation.method(#getTopGames, [], {
                      #first: first,
                      #after: after,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TwitchCategory>>>);
}
