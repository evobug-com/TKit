// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/unit/features/auto_switcher/domain/usecases/start_monitoring_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tkit/core/errors/failure.dart' as _i6;
import 'package:tkit/features/auto_switcher/domain/entities/orchestration_status.dart'
    as _i5;
import 'package:tkit/features/auto_switcher/domain/entities/update_history.dart'
    as _i7;
import 'package:tkit/features/auto_switcher/domain/repositories/i_auto_switcher_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IAutoSwitcherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAutoSwitcherRepository extends _i1.Mock
    implements _i3.IAutoSwitcherRepository {
  MockIAutoSwitcherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.OrchestrationStatus> getStatusStream() =>
      (super.noSuchMethod(
            Invocation.method(#getStatusStream, []),
            returnValue: _i4.Stream<_i5.OrchestrationStatus>.empty(),
          )
          as _i4.Stream<_i5.OrchestrationStatus>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> startMonitoring() =>
      (super.noSuchMethod(
            Invocation.method(#startMonitoring, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#startMonitoring, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> stopMonitoring() =>
      (super.noSuchMethod(
            Invocation.method(#stopMonitoring, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#stopMonitoring, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> manualUpdate() =>
      (super.noSuchMethod(
            Invocation.method(#manualUpdate, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#manualUpdate, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.OrchestrationStatus>>
  getCurrentStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentStatus, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, _i5.OrchestrationStatus>
                >.value(
                  _FakeEither_0<_i6.Failure, _i5.OrchestrationStatus>(
                    this,
                    Invocation.method(#getCurrentStatus, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.OrchestrationStatus>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i7.UpdateHistory>>>
  getUpdateHistory({int? limit = 100}) =>
      (super.noSuchMethod(
            Invocation.method(#getUpdateHistory, [], {#limit: limit}),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, List<_i7.UpdateHistory>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i7.UpdateHistory>>(
                    this,
                    Invocation.method(#getUpdateHistory, [], {#limit: limit}),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, List<_i7.UpdateHistory>>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> clearUpdateHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearUpdateHistory, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#clearUpdateHistory, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
