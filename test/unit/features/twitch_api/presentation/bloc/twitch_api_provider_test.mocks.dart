// Mocks generated by Mockito 5.4.6 from annotations
// in tkit/test/unit/features/twitch_api/presentation/bloc/twitch_api_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:logger/logger.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:talker/talker.dart' as _i3;
import 'package:tkit/core/errors/failure.dart' as _i7;
import 'package:tkit/core/utils/app_logger.dart' as _i9;
import 'package:tkit/features/twitch_api/domain/entities/twitch_category.dart'
    as _i8;
import 'package:tkit/features/twitch_api/domain/usecases/search_categories_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTalker_1 extends _i1.SmartFake implements _i3.Talker {
  _FakeTalker_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogger_2 extends _i1.SmartFake implements _i4.Logger {
  _FakeLogger_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SearchCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCategoriesUseCase extends _i1.Mock
    implements _i5.SearchCategoriesUseCase {
  MockSearchCategoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TwitchCategory>>> call(
    String? query, {
    int? first = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query], {#first: first}),
            returnValue:
                _i6.Future<
                  _i2.Either<_i7.Failure, List<_i8.TwitchCategory>>
                >.value(
                  _FakeEither_0<_i7.Failure, List<_i8.TwitchCategory>>(
                    this,
                    Invocation.method(#call, [query], {#first: first}),
                  ),
                ),
          )
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TwitchCategory>>>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i9.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Talker get talker =>
      (super.noSuchMethod(
            Invocation.getter(#talker),
            returnValue: _FakeTalker_1(this, Invocation.getter(#talker)),
          )
          as _i3.Talker);

  @override
  _i4.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_2(this, Invocation.getter(#logger)),
          )
          as _i4.Logger);

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void trace(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#trace, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
